# use python base image
FROM python:3.8

# Add custom code, install libraries, and build library
ADD . /snowflake-etl-gui
RUN pip install -r /snowflake-etl-gui/requirements.txt
RUN pip install /snowflake-etl-gui/

# Define args and can use env_file for later
ARG AWS_STATIC_KEY_ID="AWS_STATIC_KEY_ID"
ARG AWS_STATIC_ACCESS_KEY="AWS_STATIC_ACCESS_KEY"
ARG DEBUG_EASY_MIGRATION="DEBUG_EASY_MIGRATION"
ARG DJANGO_SECRET="DJANGO_SECRET"
ARG POSTGRES_PASSWORD="POSTGRES_PASSWORD"
ARG POSTGRES_USER="POSTGRES_USER"
ARG POSTGRES_HOST="POSTGRES_HOST"
ARG POSTGRES_DATABASE="POSTGRES_DATABASE"
ARG REDIS_CELERY_BROKER="REDIS_CELERY_BROKER"

ENV AWS_STATIC_KEY_ID=$AWS_STATIC_KEY_ID
ENV AWS_STATIC_ACCESS_KEY=$AWS_STATIC_ACCESS_KEY
ENV DEBUG_EASY_MIGRATION=$DEBUG_EASY_MIGRATION
ENV DJANGO_SECRET=$DJANGO_SECRET
ENV POSTGRES_PASSWORD=$POSTGRES_PASSWORD
ENV POSTGRES_USER=$POSTGRES_USER
ENV POSTGRES_HOST=$POSTGRES_HOST
ENV POSTGRES_DATABASE=$POSTGRES_DATABASE
ENV REDIS_CELERY_BROKER=$REDIS_CELERY_BROKER

# start the server on entry point
WORKDIR /snowflake-etl-gui/mysite/
# CMD python manage.py runserver 0.0.0.0:$PORT & celery -A mysite worker -l INFO
CMD gunicorn --bind 0.0.0.0:$PORT mysite.wsgi & celery -A mysite worker -l INFO
